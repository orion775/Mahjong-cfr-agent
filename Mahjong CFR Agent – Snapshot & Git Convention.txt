# Mahjong CFR Agent – Saving & Versioning New Releases (Kent & GitHub)

This document describes the *exact steps* for snapshotting, committing, and pushing new project versions to both the University (Kent) and GitHub repositories.

-------------------------------------------------------------------------------

## 1. Local Snapshotting (Manual Folder Copy)

Before every version bump or milestone, make a local snapshot as follows:

### PowerShell Snapshot Script
S
$snapshotName = "vX.Y.Z-some-feature"
$target = ".\.mahjong_snapshots\$snapshotName"

New-Item -ItemType Directory -Force -Path $target
Copy-Item -Recurse -Path .\* -Exclude ".git", ".mahjong_snapshots", "mahjong_snapshots" -Destination $target

**Always update `$snapshotName` with the new version tag and a short description.**

-------------------------------------------------------------------------------

## 2. Git Commit Workflow (University + GitHub)

### Step 1: Stage Only the Files You Want

# Example: Stage all main project changes
git add README.md devlog.md "Mahjong CFR Agent – Snapshot & Git Convention.txt" engine/ tests/ ...

### Step 2: Commit with a Versioned Message

git commit -m "vX.Y.Z: Short, clear message about this version bump or feature"

### Step 3: Push to University Git (origin)

git push origin main

### Step 4: Push to GitHub (github)

git push github main

### Step 5: Push Version Tags (if using tags)

git tag vX.Y.Z
git push origin vX.Y.Z
git push github vX.Y.Z

-------------------------------------------------------------------------------

## 3. Quick Checklist

1. **Snapshot** the project before every major version or experiment.
2. **Stage** only what you want (never use `git add .`).
3. **Commit** with a semantic versioned message (vX.Y.Z: ...).
4. **Push** to both `origin` (Kent) and `github`.
5. **Push tags** to both if using.
6. **Check** both repositories in the browser for new commit.

-------------------------------------------------------------------------------

## Example Version Bump Commands

# 1. Create snapshot
$snapshotName = "v2.1.0-feature-abc"
$target = ".\.mahjong_snapshots\$snapshotName"
New-Item -ItemType Directory -Force -Path $target
Copy-Item -Recurse -Path .\* -Exclude ".git", ".mahjong_snapshots", "mahjong_snapshots" -Destination $target

# 2. Stage, commit, push (example for README, engine, tests)
git add README.md engine/ tests/
git commit -m "v2.1.0: Add feature ABC and update documentation"
git push origin main
git push github main

# 3. (optional) Tag version and push tag
git tag v2.1.0
git push origin v2.1.0
git push github v2.1.0

-------------------------------------------------------------------------------

## General Guidelines

- Never rely on a single remote: **always push to both** for every version bump or milestone.
- Use snapshots before any risky changes or refactors.
- Always use semantic versioning and clear commit messages.
- Do not use `git add .`—add files or folders selectively.

-------------------------------------------------------------------------------

*Last updated: 2025-07-08 (Full dual-remote + snapshot workflow for Kent & GitHub)*
To check your current remotes:

git remote -v

You should see:

origin  https://git.cs.kent.ac.uk/aa2752/mahjong.git (fetch)
origin  https://git.cs.kent.ac.uk/aa2752/mahjong.git (push)
github  https://github.com/orion775/Mahjong-cfr-agent.git (fetch)
github  https://github.com/orion775/Mahjong-cfr-agent.git (push)

To remove or rename a remote:

git remote remove github
git remote rename github somethingelse

-------------------------------------------------------------------------------

## Example Version Names

Version                        | Description
------------------------------ | --------------------------------------------------
v0.1.0-init                    | Initial tile class and action space
v0.3.0-pon-tested              | PON logic implemented and passing
v0.5.0-pass-added              | PASS logic and unit test added
v0.6.0-working-meld-pass-pon   | Full tested meld sequence including PON and PASS
v1.0.0-github-sync             | First GitHub + University dual remote sync

-------------------------------------------------------------------------------

## Quick Reference Table

Action                     | Command
-------------------------- | ------------------------------------------------------------
Add GitHub remote          | git remote add github https://github.com/USER/REPO.git
Push branch to origin      | git push origin main
Push branch to GitHub      | git push github main
Push tags to both          | git push origin --tags  &&  git push github --tags
Remove a remote            | git remote remove github
Rename a remote            | git remote rename github newname

-------------------------------------------------------------------------------

## General Guidelines

- Always push to both remotes after each stable commit.
- Snapshots should be taken before any major commit or refactor, and especially before risky experiments.
- This file must be uploaded when resuming work in a new session to keep workflow and versioning consistent.
- Never rely solely on git: regular local snapshots guarantee you can always roll back to any working state, even after large refactors or mistakes.

-------------------------------------------------------------------------------

Last updated after v1.0.0 milestone (multi-remote workflow with University + GitHub).